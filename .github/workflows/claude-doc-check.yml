name: Claude Documentation Check

on:
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (dry run without Claude API)'
        required: false
        type: boolean
        default: false
      pr_number:
        description: 'PR number to test against (optional)'
        required: false
        type: string
  
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/ts-moose-lib/**'
      - 'packages/py-moose-lib/**'
      - 'apps/framework-cli/**'

jobs:
  # Initial check for changes in relevant directories
  detect-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      should_run: ${{ steps.check-changes.outputs.should_run }}
      changed_files: ${{ steps.check-changes.outputs.changed_files }}
      ts_moose_changed: ${{ steps.check-changes.outputs.ts_moose_changed }}
      py_moose_changed: ${{ steps.check-changes.outputs.py_moose_changed }}
      cli_changed: ${{ steps.check-changes.outputs.cli_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: check-changes
        run: |
          # Get the list of changed files
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          
          echo "::group::📋 Changed Files"
          cat changed_files.txt
          echo "::endgroup::"
          
          # Check for changes in each component
          TS_MOOSE_CHANGED=false
          PY_MOOSE_CHANGED=false
          CLI_CHANGED=false
          
          if grep -q "^packages/ts-moose-lib/" changed_files.txt; then
            TS_MOOSE_CHANGED=true
            echo "✅ TypeScript Moose Library changes detected"
          fi
          
          if grep -q "^packages/py-moose-lib/" changed_files.txt; then
            PY_MOOSE_CHANGED=true
            echo "✅ Python Moose Library changes detected"
          fi
          
          if grep -q "^apps/framework-cli/" changed_files.txt; then
            CLI_CHANGED=true
            echo "✅ Framework CLI changes detected"
          fi
          
          # Check if any relevant files were changed
          if [ "$TS_MOOSE_CHANGED" = true ] || [ "$PY_MOOSE_CHANGED" = true ] || [ "$CLI_CHANGED" = true ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "ts_moose_changed=$TS_MOOSE_CHANGED" >> $GITHUB_OUTPUT
            echo "py_moose_changed=$PY_MOOSE_CHANGED" >> $GITHUB_OUTPUT
            echo "cli_changed=$CLI_CHANGED" >> $GITHUB_OUTPUT
            
            # Output the list of changed files for the next job
            CHANGED_FILES=$(cat changed_files.txt | tr '\n' ' ')
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
            
            echo "::notice title=📖 Documentation Check Required::Changes detected in framework components. Documentation check will run."
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "::notice title=⏭️ Skipping Documentation Check::No changes in framework components detected."
          fi

  # Run Claude Code to analyze documentation requirements
  documentation-analysis:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

      - name: Get PR diff
        id: get-diff
        run: |
          # Get the detailed diff for analysis
          git diff ${{ github.base_ref }}...HEAD > pr_diff.txt
          
          # Also get a summary of changes
          echo "## Summary of Changes" > pr_summary.txt
          echo "" >> pr_summary.txt
          
          if [ "${{ needs.detect-changes.outputs.ts_moose_changed }}" = "true" ]; then
            echo "### TypeScript Moose Library Changes:" >> pr_summary.txt
            git diff --stat ${{ github.base_ref }}...HEAD -- packages/ts-moose-lib/ >> pr_summary.txt
            echo "" >> pr_summary.txt
          fi
          
          if [ "${{ needs.detect-changes.outputs.py_moose_changed }}" = "true" ]; then
            echo "### Python Moose Library Changes:" >> pr_summary.txt
            git diff --stat ${{ github.base_ref }}...HEAD -- packages/py-moose-lib/ >> pr_summary.txt
            echo "" >> pr_summary.txt
          fi
          
          if [ "${{ needs.detect-changes.outputs.cli_changed }}" = "true" ]; then
            echo "### Framework CLI Changes:" >> pr_summary.txt
            git diff --stat ${{ github.base_ref }}...HEAD -- apps/framework-cli/ >> pr_summary.txt
            echo "" >> pr_summary.txt
          fi

      - name: Check documentation updates
        id: check-docs
        run: |
          # Check if documentation files were updated
          DOC_UPDATED=false
          if git diff --name-only ${{ github.base_ref }}...HEAD | grep -q "^apps/framework-docs/"; then
            DOC_UPDATED=true
            echo "📚 Documentation files were updated in this PR"
            
            # Get list of updated documentation files
            echo "## Updated Documentation Files:" > doc_updates.txt
            git diff --name-only ${{ github.base_ref }}...HEAD | grep "^apps/framework-docs/" >> doc_updates.txt
          else
            echo "⚠️ No documentation files were updated in this PR"
            echo "## No Documentation Updates Found" > doc_updates.txt
          fi
          
          echo "doc_updated=$DOC_UPDATED" >> $GITHUB_OUTPUT

      - name: Run Claude Code Analysis (Real Mode)
        if: github.event.inputs.test_mode != 'true'
        uses: anthropics/claude-code-action@v1
        id: claude-analysis
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-3-5-sonnet-20241022
          max_tokens: 4096
          temperature: 0.2
          system_prompt: |
            You are a documentation reviewer for the Moose framework. Your role is to analyze pull request changes and determine if documentation updates are required.
            
            The Moose framework consists of:
            - TypeScript Moose Library (packages/ts-moose-lib/): TypeScript SDK for building data-intensive applications
            - Python Moose Library (packages/py-moose-lib/): Python SDK for building data-intensive applications
            - Framework CLI (apps/framework-cli/): Command-line interface for managing Moose projects
            
            Documentation is located in apps/framework-docs/ and includes:
            - API documentation
            - Getting started guides
            - Reference documentation
            - Migration guides
            - Deployment guides
            - Workflow documentation
            
            Your task is to:
            1. Analyze the code changes in the PR
            2. Determine if any changes require documentation updates
            3. Check if corresponding documentation has been updated
            4. Provide specific, actionable feedback about missing or incomplete documentation
            
            Focus on:
            - New features or APIs that need documentation
            - Breaking changes that need migration guides
            - Changed behavior that needs updated examples
            - New configuration options that need documentation
            - Deprecated features that need warnings
            
            Be specific about:
            - Which files in the documentation need updates
            - What specific sections need to be added or modified
            - Example code that should be updated
            
            Format your response as a clear, actionable comment for the PR author.
          prompt: |
            Please analyze this pull request for documentation requirements.
            
            ## PR Information
            - PR Title: ${{ github.event.pull_request.title }}
            - PR Description: ${{ github.event.pull_request.body }}
            
            ## Components Changed
            - TypeScript Moose Library: ${{ needs.detect-changes.outputs.ts_moose_changed }}
            - Python Moose Library: ${{ needs.detect-changes.outputs.py_moose_changed }}
            - Framework CLI: ${{ needs.detect-changes.outputs.cli_changed }}
            
            ## Changed Files
            ${{ needs.detect-changes.outputs.changed_files }}
            
            ## Documentation Status
            Documentation files updated: ${{ steps.check-docs.outputs.doc_updated }}
            
            ## Summary of Changes
            $(cat pr_summary.txt)
            
            ## Documentation Updates (if any)
            $(cat doc_updates.txt)
            
            ## Detailed Code Changes
            Please analyze the following diff and determine if documentation updates are needed:
            
            ```diff
            $(head -n 5000 pr_diff.txt)
            ```
            
            Based on these changes:
            1. Do these changes require documentation updates?
            2. If yes, what specific documentation is missing or needs updating?
            3. Provide actionable feedback for the PR author.
            
            If documentation is already properly updated, acknowledge that.
            If no documentation changes are needed, explain why.
            
            Be constructive and specific in your feedback.

      - name: Run Test Mode Analysis (Simulated)
        if: github.event.inputs.test_mode == 'true'
        id: test-analysis
        run: |
          echo "🧪 Running in TEST MODE - Simulating Claude analysis"
          
          # Create a simulated response based on the changes
          RESPONSE="## 🧪 Test Mode Analysis\n\n"
          RESPONSE+="This is a simulated documentation review in test mode.\n\n"
          
          if [ "${{ needs.detect-changes.outputs.ts_moose_changed }}" = "true" ]; then
            RESPONSE+="### TypeScript Moose Library Changes Detected\n"
            RESPONSE+="- Found changes in TypeScript SDK\n"
            RESPONSE+="- **Test suggestion**: Consider updating TypeScript API documentation\n\n"
          fi
          
          if [ "${{ needs.detect-changes.outputs.py_moose_changed }}" = "true" ]; then
            RESPONSE+="### Python Moose Library Changes Detected\n"
            RESPONSE+="- Found changes in Python SDK\n"
            RESPONSE+="- **Test suggestion**: Consider updating Python API documentation\n\n"
          fi
          
          if [ "${{ needs.detect-changes.outputs.cli_changed }}" = "true" ]; then
            RESPONSE+="### Framework CLI Changes Detected\n"
            RESPONSE+="- Found changes in CLI\n"
            RESPONSE+="- **Test suggestion**: Consider updating CLI command documentation\n\n"
          fi
          
          if [ "${{ steps.check-docs.outputs.doc_updated }}" = "true" ]; then
            RESPONSE+="✅ Documentation files were updated in this PR.\n\n"
          else
            RESPONSE+="⚠️ No documentation files were updated. Please review if documentation changes are needed.\n\n"
          fi
          
          RESPONSE+="---\n*This is a TEST MODE response. In production, Claude AI will provide detailed analysis.*"
          
          # Output the response for the next step
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Analysis as PR Comment
        if: steps.claude-analysis.outputs.response != '' || steps.test-analysis.outputs.response != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the response from either real or test mode
            const isTestMode = '${{ github.event.inputs.test_mode }}' === 'true';
            const analysis = isTestMode 
              ? `${{ steps.test-analysis.outputs.response }}`
              : `${{ steps.claude-analysis.outputs.response }}`;
            
            // Create appropriate header and footer
            const header = isTestMode 
              ? `## 🧪 Documentation Review (Test Mode)\n\n`
              : `## 📖 Documentation Review by Claude\n\n`;
            
            const footer = isTestMode
              ? `\n\n---\n*This is a TEST MODE review. In production, Claude AI will provide detailed analysis.*`
              : `\n\n---\n*This automated review was generated by [Claude Code](https://docs.anthropic.com/en/docs/claude-code/github-actions) to help ensure documentation stays up-to-date with code changes.*`;
            
            const fullComment = header + analysis + footer;
            
            // Determine the PR number
            const prNumber = context.issue?.number || '${{ github.event.inputs.pr_number }}';
            
            if (!prNumber) {
              console.log('❌ No PR number available');
              return;
            }
            
            // Post the comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber),
              body: fullComment
            });
            
            console.log(`✅ Posted ${isTestMode ? 'test' : 'documentation review'} comment to PR #${prNumber}`);

      - name: Add Documentation Label if Needed
        if: contains(steps.claude-analysis.outputs.response, 'documentation') && contains(steps.claude-analysis.outputs.response, 'need')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add a label to indicate documentation is needed
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['documentation-needed']
            });
            
            console.log('🏷️ Added documentation-needed label');

  # Summary job to provide final status
  documentation-check-complete:
    needs: [detect-changes, documentation-analysis]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Summary
        run: |
          if [[ "${{ needs.detect-changes.outputs.should_run }}" == "false" ]]; then
            echo "✅ No documentation check needed - no changes in framework components"
            exit 0
          fi
          
          if [[ "${{ needs.documentation-analysis.result }}" == "success" ]]; then
            echo "✅ Documentation analysis completed successfully"
            exit 0
          elif [[ "${{ needs.documentation-analysis.result }}" == "failure" ]]; then
            echo "❌ Documentation analysis failed"
            exit 1
          elif [[ "${{ needs.documentation-analysis.result }}" == "skipped" ]]; then
            echo "⏭️ Documentation analysis was skipped"
            exit 0
          else
            echo "⚠️ Documentation analysis status: ${{ needs.documentation-analysis.result }}"
            exit 0
          fi